"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 加载环境变量
ENV_PATH = BASE_DIR / '.env'
load_dotenv(ENV_PATH)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-2_a!s56em)&8o*cn!-!d1-j9i#9l^myh+tfilm53*2q07@wllg"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 现在可以使用 DEBUG 变量了
if DEBUG:
    print("环境变量验证:")
    env_vars = {
        'DB_NAME': os.getenv('DB_NAME'),
        'DB_USER': os.getenv('DB_USER'),
        'DB_PASSWORD': os.getenv('DB_PASSWORD'),
        'DB_HOST': os.getenv('DB_HOST'),
        'DB_PORT': os.getenv('DB_PORT'),
    }
    for key, value in env_vars.items():
        print(f"{key}: {value}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

ALLOWED_HOSTS = []


# Application definition
# INSTALLED_APPS 包含了项目中所有Django应用的配置
# 包括Django内置应用和自定义应用
INSTALLED_APPS = [
    # Django内置应用
    "django.contrib.admin",      # 管理后台
    "django.contrib.auth",       # 认证系统
    "django.contrib.contenttypes",  # 内容类型框架
    "django.contrib.sessions",   # 会话框架
    "django.contrib.messages",   # 消息框架
    "django.contrib.staticfiles",  # 静态文件管理
    
    # 自定义应用
    "articles.apps.ArticlesConfig",  # 使用应用配置类注册文章应用
    # ArticlesConfig 定义在 articles/apps.py 中
    # 包含应用的基本配置，如：
    # - 应用名称 (name)
    # - 后台显示名称 (verbose_name)
    # - 初始化代码 (ready方法)
    # - 信号处理器配置
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, 'templates'),      # 全局模板目录
            os.path.join(BASE_DIR, 'articles/templates'),  # 应用模板目录
        ],
        "APP_DIRS": True,  # 允许Django在每个应用的templates目录中查找模板
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",  # 处理媒体文件的上下文处理器
            ],
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'blog_db',
        'USER': 'postgres',
        'PASSWORD': '232453546364',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# 需要在系统环境变量或.env文件中设置以下变量:
# DB_NAME - 数据库名称
# DB_USER - 数据库用户名
# DB_PASSWORD - 数据库密码
# DB_HOST - 数据库主机地址
# DB_PORT - 数据库端口号


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"  # 静态文件的URL前缀

# 开发时的静态文件目录
# STATICFILES_DIRS 定义额外的静态文件目录
# 开发时在这里存放和编辑静态文件
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# 生产环境的静态文件目录
# STATIC_ROOT 是收集所有静态文件的目录
# python manage.py collectstatic 命令会将所有静态文件收集到这里
# 生产环境中web服务器直接从这个目录提供静态文件
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 媒体文件配置（用户上传的文件）
MEDIA_URL = '/media/'  # 媒体文件的URL前缀
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 媒体文件存储目录

# 文件上传配置
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.MemoryFileUploadHandler",    # 小文件使用内存处理
    "django.core.files.uploadhandler.TemporaryFileUploadHandler", # 大文件使用临时文件处理
]
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB 内存上传限制

# 安全相关配置
SECURE_BROWSER_XSS_FILTER = True  # 开启XSS过滤
SECURE_CONTENT_TYPE_NOSNIFF = True  # 防止MIME类型嗅探
X_FRAME_OPTIONS = 'SAMEORIGIN'  # 防止点击劫持

# 环境特定配置
if DEBUG:
    # 开发环境配置
    ALLOWED_HOSTS = ['*']  # 允许所有主机访问
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 邮件输出到控制台
    # 添加数据库日志
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        },
    }
else:
    # 生产环境配置
    ALLOWED_HOSTS = ['yourdomain.com']  # 限制允许的主机
    # 生产环境安全设置
    SECURE_SSL_REDIRECT = True  # 强制HTTPS
    SESSION_COOKIE_SECURE = True  # 仅通过HTTPS发送会话cookie
    CSRF_COOKIE_SECURE = True  # 仅通过HTTPS发送CSRF cookie

# 数据库连接持久化
CONN_MAX_AGE = 60  # 数据库连接最大存活时间（秒）
